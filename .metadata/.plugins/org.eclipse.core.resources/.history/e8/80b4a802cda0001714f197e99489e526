package simpledb;

import java.io.*;
import java.util.*;

/**
 * HeapFile is an implementation of a DbFile that stores a collection of tuples
 * in no particular order. Tuples are stored on pages, each of which is a fixed
 * size, and the file is simply a collection of those pages. HeapFile works
 * closely with HeapPage. The format of HeapPages is described in the HeapPage
 * constructor.
 * 
 * @see simpledb.HeapPage#HeapPage
 * @author Sam Madden
 */
public class HeapFile implements DbFile {

	private final File heapFile;
	private final TupleDesc td;
	private final RandomAccessFile randomAccessVersion;
	
	private final int pageSize = BufferPool.getPageSize();
	
    /**
     * Constructs a heap file backed by the specified file.
     * 
     * @param f
     *            the file that stores the on-disk backing store for this heap
     *            file.
     */
    public HeapFile(File f, TupleDesc td) {
        this.heapFile = f;
        this.td = td;
        try {
			this.randomAccessVersion = new RandomAccessFile(f, "rw");
		} catch (FileNotFoundException e) {
			throw new RuntimeException("File not found!");
		}
    }

    /**
     * Returns the File backing this HeapFile on disk.
     * 
     * @return the File backing this HeapFile on disk.
     */
    public File getFile() {
        return heapFile;
    }

    /**
     * Returns an ID uniquely identifying this HeapFile. Implementation note:
     * you will need to generate this tableid somewhere to ensure that each
     * HeapFile has a "unique id," and that you always return the same value for
     * a particular HeapFile. We suggest hashing the absolute file name of the
     * file underlying the heapfile, i.e. f.getAbsoluteFile().hashCode().
     * 
     * @return an ID uniquely identifying this HeapFile.
     */
    public int getId() {
        return heapFile.getAbsoluteFile().hashCode();
    }

    /**
     * Returns the TupleDesc of the table stored in this DbFile.
     * 
     * @return TupleDesc of this DbFile.
     */
    public TupleDesc getTupleDesc() {
        return td;
    }

    // See DbFile.java for javadocs.
    public Page readPage(PageId pid) {
    	
    	// Offset measured in bytes.
    	// Precise offset is pagesize * page index.
    	final long offset = this.pageSize * pid.getPageNumber();
    	
    	// Read data starting at offset.
    	final byte[] reading = new byte[this.pageSize];
    	
    	try {
			randomAccessVersion.seek(offset);
			final int bytesRead = randomAccessVersion.read(reading);
			if (bytesRead == this.pageSize) {
				return new HeapPage((HeapPageId) pid, reading);
			}
		} catch (IOException e1) {
			e1.printStackTrace();
		}
    	
    	return null;
    }

    // see DbFile.java for javadocs
    public void writePage(Page page) throws IOException {
        // some code goes here
        // not necessary for lab1
    }

    /**
     * Returns the number of pages in this HeapFile.
     */
    public int numPages() {
    	// Heapfile length is in bytes; convenient calculation.
        return (int) heapFile.length() / this.pageSize;
    }

    // see DbFile.java for javadocs
    public ArrayList<Page> insertTuple(TransactionId tid, Tuple t)
            throws DbException, IOException, TransactionAbortedException {
        // some code goes here
        return null;
        // not necessary for lab1
    }

    // see DbFile.java for javadocs
    public ArrayList<Page> deleteTuple(TransactionId tid, Tuple t) throws DbException,
            TransactionAbortedException {
        // some code goes here
        return null;
        // not necessary for lab1
    }

    // see DbFile.java for javadocs
    public DbFileIterator iterator(TransactionId tid) {
        final int tableId = this.getId();
        return new HeapFileIterator(tableId, numPages(), tid);
    }

}

