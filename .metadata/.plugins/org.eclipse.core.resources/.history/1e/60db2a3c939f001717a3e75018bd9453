package simpledb;

import java.io.Serializable;
import java.util.*;

/**
 * TupleDesc describes the schema of a tuple.
 */
public class TupleDesc implements Serializable {

	// Class variables.
	private Type[] typeAr;
	private String[] fieldAr;
	final private TDItem[] infoAr;

    /**
     * A help class to facilitate organizing the information of each field
     * */
    public static class TDItem implements Serializable {

        private static final long serialVersionUID = 1L;

        /**
         * The type of the field
         * */
        public final Type fieldType;

        /**
         * The name of the field
         * */
        public final String fieldName;

        public TDItem(Type t, String n) {
            this.fieldName = n;
            this.fieldType = t;
        }

        public String toString() {
            return fieldName + "(" + fieldType + ")";
        }
    }

    
    /**
     * @return
     *        An iterator which iterates over all the field TDItems
     *        that are included in this TupleDesc
     * */
    public Iterator<TDItem> iterator() {
    	// Convert to iterable list.
    	return Arrays.asList(infoAr).iterator();
    }
    
    private static final long serialVersionUID = 1L;

    /**
     * Create a new TupleDesc with typeAr.length fields with fields of the
     * specified types, with associated named fields.
     *
     * @param typeAr
     *            array specifying the number of and types of fields in this
     *            TupleDesc. It must contain at least one entry.
     * @param fieldAr
     *            array specifying the names of the fields. Note that names may
     *            be null.
     */
    public TupleDesc(Type[] typeAr, String[] fieldAr) {
    	this.typeAr = typeAr;
    	this.fieldAr = fieldAr;
    	infoAr = new TDItem[typeAr.length];
    	for (int i = 0; i < typeAr.length; i++) {
    		infoAr[i] = new TDItem(typeAr[i], fieldAr[i]);
    	}
    }

    /**
     * Constructor. Create a new tuple desc with typeAr.length fields with
     * fields of the specified types, with anonymous (unnamed) fields.
     *
     * @param typeAr
     *            array specifying the number of and types of fields in this
     *            TupleDesc. It must contain at least one entry.
     */
    public TupleDesc(Type[] typeAr) {
        this.typeAr = typeAr;
        this.infoAr = new TDItem[typeAr.length];
        for (int i = 0; i < typeAr.length; i++) {
        	// Null for unnamed fields.
    		infoAr[i] = new TDItem(typeAr[i], null);
    	}
    }
    
    public void reset() {
    	
    }
    
    /**
     * Constructor. Returns a copy of this schema.
     * 
     * @param td
     * @return A copy of this schema.
     */
    public static TupleDesc copySchema(TupleDesc td) {
    	if (td.fieldAr == null) {
    		return new TupleDesc(td.typeAr);
    	}
    	return new TupleDesc(td.typeAr, td.fieldAr);
    }

    /**
     * @return the number of fields in this TupleDesc
     */
    public int numFields() {
        return typeAr.length;
    }

    /**
     * Gets the (possibly null) field name of the ith field of this TupleDesc.
     *
     * @param i
     *            index of the field name to return. It must be a valid index.
     * @return the name of the ith field
     * @throws NoSuchElementException
     *             if i is not a valid field reference.
     */
    public String getFieldName(int i) throws NoSuchElementException {
        try {
        	return this.fieldAr[i];
        }
        catch (Exception e) {
        	throw new NoSuchElementException();
        }
    }

    /**
     * Gets the type of the ith field of this TupleDesc.
     *
     * @param i
     *            The index of the field to get the type of. It must be a valid
     *            index.
     * @return the type of the ith field
     * @throws NoSuchElementException
     *             if i is not a valid field reference.
     */
    public Type getFieldType(int i) throws NoSuchElementException {
    	try {
        	return this.typeAr[i];
        }
        catch (Exception e) {
        	throw new NoSuchElementException();
        }
    }

    /**
     * Find the index of the field with a given name.
     *
     * @param name
     *            name of the field.
     * @return the index of the field that is first to have the given name.
     * @throws NoSuchElementException
     *             if no field with a matching name is found.
     */
    public int fieldNameToIndex(String name) throws NoSuchElementException {

    	// Check if all fields are null.
    	if (fieldAr == null) {
    		throw new NoSuchElementException();
    	}
    	
    	boolean allNull = true;
    	for (String n : fieldAr) {
    		if (n != null) {
    			allNull = false;
    		}
    	}
    	if (allNull) {
    		throw new NoSuchElementException();
    	}
    	
        for (int i = 0; i < fieldAr.length; i++) {
        	if (fieldAr[i].equals(name)) {
        		return i;
        	}
        }

        throw new NoSuchElementException();
    }

    /**
     * @return The size (in bytes) of tuples corresponding to this TupleDesc.
     *         Note that tuples from a given TupleDesc are of a fixed size.
     */
    public int getSize() {
        int size = 0;
        for (Type type : this.typeAr) {
        	size += type.getLen();
        }
        return size;
    }

    /**
     * Merge two TupleDescs into one, with td1.numFields + td2.numFields fields,
     * with the first td1.numFields coming from td1 and the remaining from td2.
     *
     * @param td1
     *            The TupleDesc with the first fields of the new TupleDesc
     * @param td2
     *            The TupleDesc with the last fields of the TupleDesc
     * @return the new TupleDesc
     */
    public static TupleDesc merge(TupleDesc td1, TupleDesc td2) {
    	final List<Type> typeAr = new ArrayList<>();
    	final List<String> fieldAr = new ArrayList<>();
    	for (Type t : td1.typeAr) {
    		typeAr.add(t);
    	}
    	for (Type t : td2.typeAr) {
    		typeAr.add(t);
    	}
    	for (String s : td1.fieldAr) {
    		fieldAr.add(s);
    	}
    	for (String s : td2.fieldAr) {
    		fieldAr.add(s);
    	}
    	return new TupleDesc(typeAr.toArray(new Type[typeAr.size()]),
    					fieldAr.toArray(new String[fieldAr.size()]));
    }

    /**
     * Compares the specified object with this TupleDesc for equality. Two
     * TupleDescs are considered equal if they have the same number of items
     * and if the i-th type in this TupleDesc is equal to the i-th type in o
     * for every i.
     *
     * @param o
     *           	 the Object to be compared for equality with this TupleDesc.
     * @return true if the object is equal to this TupleDesc.
     */

    public boolean equals(Object o) {
        if (!(o instanceof TupleDesc)) {
        	return false;
        }
        final TupleDesc that = (TupleDesc) o;
        if (!Arrays.equals(this.typeAr, that.typeAr) ||
        		this.typeAr.length != that.typeAr.length) {
        	return false;
        }
        return true;
    }

    public int hashCode() {
        // If you want to use TupleDesc as keys for HashMap, implement this so
        // that equal objects have equals hashCode() results.
        int typeSum = 0;
        final int exponent = 3;
        for (Type t : typeAr) {
        	typeSum += Math.pow(t.hashCode(), exponent);
        }
        for (String s : fieldAr) {
        	typeSum += Math.pow(s.hashCode(), exponent);
        }
        return typeSum;
    }

    /**
     * Returns a String describing this descriptor. It should be of the form
     * "fieldType[0](fieldName[0]), ..., fieldType[M](fieldName[M])", although
     * the exact format does not matter.
     *
     * @return String describing this descriptor.
     */
    public String toString() {
    	// Prints each item line by line, and
    	// fields which are unnamed (null by design)
    	// are specified as unnamed in the output.
        String output = "";
        for (TDItem item : infoAr) {
        	output += item.fieldType.toString() + "(";
        	if (item.fieldName == null) {
        		output += "unnamed)\n";
        	}
        	else {
        		output += item.fieldName + ")\n";
        	}
        }
        return output;
    }
}
