//package simpledb;
//
//import java.util.Iterator;
//
//public class HeapFileIterator extends AbstractDbFileIterator {
//	
//	// Class variables.
//	private boolean openStatus = false;
//	private int currentPage = 0;
//	private Iterator<Tuple> currentPageIterator;
//	private final int tableId;
//	private final int totalNumberOfPages;
//	
//	// tid and perm used for placeholders until later labs.
//	private final TransactionId tid = null;
//	private final Permissions perm = null;
//	
//	public HeapFileIterator(int tableId, int totalNumPages, TransactionId tid) {
//		this.tableId = tableId;
//		this.totalNumberOfPages = totalNumPages;
//		try {
//			currentPageIterator = getPageIterator(currentPage);
//		} catch (TransactionAbortedException e) {
//			e.printStackTrace();
//		} catch (DbException e) {
//			e.printStackTrace();
//		}
//	}
//	
//	@Override
//	public void open() throws DbException, TransactionAbortedException {
//		if (openStatus) {
//			throw new DbException("Iterator already open.");
//		}
//		openStatus = true;
//	}
//
//	@Override
//	public void close() {
//		openStatus = false;
//	}
//	
//	@Override
//	public void rewind() throws DbException, TransactionAbortedException {
//		if (openStatus) {
//			currentPage = 0;
//			currentPageIterator = getPageIterator(currentPage);
//		}
//	}
//
//	@Override
//	protected Tuple readNext() throws DbException, TransactionAbortedException {
//		
//		if (openStatus) {
//			if (currentPageIterator.hasNext()) {
//				return currentPageIterator.next();
//			}
//			currentPage++;
//			if (currentPage > totalNumberOfPages) {
//				return null;
//			}
//			currentPageIterator = getPageIterator(currentPage);
//			if (currentPageIterator.hasNext()) {
//				return currentPageIterator.next();
//			}
//		}
//		
//		return null;
//	}
//	
//	/**
//	 * Gets the iterator of the page with the specified number in the table.
//	 * 
//	 * @param pageNumber Number of the page to get the iterator of.
//	 * @return The iterator to iterate through all tuples of page with pageNumber.
//	 * @throws TransactionAbortedException
//	 * @throws DbException
//	 */
//	public Iterator<Tuple> getPageIterator(int pageNumber) throws TransactionAbortedException, DbException {
//		final PageId pageId = new HeapPageId(this.tableId, pageNumber);
//		final HeapPage page = (HeapPage) Database.getBufferPool().getPage(tid, pageId, perm);
//		return page.iterator();
//	}
//
//}

package simpledb;

import java.util.Iterator;
import java.util.NoSuchElementException;

public class HeapFileIterator implements DbFileIterator {

  private final int tableId;
  private final int numberOfPages;
  private final TransactionId transactionId;
  private int currentPageNumber;
  private Iterator<Tuple> currentPageIterator;
  private boolean open;
  private Tuple next;

  HeapFileIterator(int tableId, int numberOfPages, TransactionId transactionId) {
    this.tableId = tableId;
    this.numberOfPages = numberOfPages;
    this.open = false;
    this.transactionId = transactionId;
  }

  public static HeapFileIterator create(int tableId, int numberOfPages, TransactionId transactionId) {
    return new HeapFileIterator(tableId, numberOfPages, transactionId);
  }

  @Override
  public void open() throws DbException, TransactionAbortedException {
    if (open) {
      throw new DbException("Opened already open HeapFileIterator");
    }
    this.open = true;
    rewind();
  }

  private Iterator<Tuple> getPageIterator(int pageNumber) throws DbException,
      TransactionAbortedException {
    PageId pageId = new HeapPageId(tableId, pageNumber);
    Page page = Database.getBufferPool().getPage(transactionId, pageId, Permissions.READ_ONLY);
    return ((HeapPage) page).iterator();
  }

  private void incrementPageNumber() throws DbException, TransactionAbortedException {
    currentPageNumber++;
    if (currentPageNumber >= numberOfPages) {
      return;
    }
    currentPageIterator = getPageIterator(currentPageNumber);
  }

  private Tuple getNext() throws DbException, TransactionAbortedException {
    while (currentPageNumber < numberOfPages) {
      if (currentPageIterator.hasNext()) {
        return currentPageIterator.next();
      }
      incrementPageNumber();
    }
    return null;
  }

  @Override
  public boolean hasNext() throws DbException, TransactionAbortedException {
    return open && (next != null);
  }

  @Override
  public Tuple next() throws DbException, TransactionAbortedException, NoSuchElementException {
    if (!open || !hasNext()) {
      throw new NoSuchElementException();
    }
    Tuple result = next;
    next = getNext();
    return result;
  }

  @Override
  public void rewind() throws DbException, TransactionAbortedException {
    if (open) {
      this.currentPageNumber = 0;
      this.currentPageIterator = getPageIterator(currentPageNumber);
      this.next = getNext();
    }
  }

  @Override
  public void close() {
    open = false;
  }

}
